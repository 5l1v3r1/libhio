#----------------------------------------------------------------------------
# run_setup - common setup for hio tests 
# Source this file from each test script.
#
# Env vars used for input:
#   HIO_BUILD - location of HIO build tree, defaults to $PWD/..
#
# BASH variables set that can be used by test script:
#        root - data root for test, created or emptied
#        size - gross size of IO, per rank t|s|m|l|x
#       ranks - number of MPI ranks
#    verbose_lev - xexec2 verbosity level
#   debug_lev - xexec2 debug level
#   HIO_TEST_ROOT - if not set, will be set to default data root string  
#
# BASH functions that can be called by the test script:
#   clean_roots - creates or empties out specified data roots
#           cmd - logs and runs a command
#           msg - logs a message
#         myrun - issues mpirun or aprun command with -n specified 
#
# Change History: 
#   20150501  cgw  Initial version
#----------------------------------------------------------------------------
synexit() {
  echo ""
  if [[ -n $* ]]; then echo $*; echo ""; fi
  echo "run_setup - common setup for hio tests"
  echo ""
  echo "  Syntax:"
  echo "    $0"
  echo "        [-s <size>]]"
  echo "        [-n <num_ranks>]"
  echo "        [-v <verbose_level>]"
  echo "        [-d <debug_level>]"
  echo ""
  echo "  Options:"   
  echo "    -s <size>       Per rank run size t|s|m|l|x  (default s)"
  echo "    -n <num_ranks>  Number of MPI ranks.  Default is all allocated"
  echo "                    CPs or 2 on Mac OS"
  echo "    -v <verbose_lev>   Verbosity level for xexec2, default 1"
  echo "    -d <debug_lev>  Debug level for xexec2, default 0"
  echo ""
  echo "  Cornell Wright  cornell@lanl.gov"
  
  exit 8
}

cmd() {
  echo "$host ---> $*"
  eval "$*"
  return $?         
}

msg() { 
  echo "$host $*" 
}

#----------------------------------------------------------------------------
# Parse arguments
#----------------------------------------------------------------------------
host=`hostname -s`
max_rc=0
verbose_lev=1
debug_lev=0

# Platform specific defaults
if [[ ${OSTYPE:0:6} == "darwin" ]]; then
  mympicmd="mpirun"
  size="s"
  ranks=2
else
  size="m"
  type aprun > /dev/null 2>&1
  if [[ $? -eq 0 ]]; then
    # aprun available - must be a Cray
    mympicmd="aprun"
    ranks=$PBS_NP
  else
    # aprun not available - use mpirun
    mympicmd="mpirun"
    ranks=$((SLURM_JOB_CPUS_PER_NODE * SLURM_JOB_NODES))
  fi
fi

while getopts "hs:n:v:d:" optname; do
  case $optname in
    h ) synexit;;
    s ) size=$OPTARG;;
    n ) ranks=$OPTARG;;
    v ) verbose_lev=$OPTARG;;
    d ) debug_lev=$OPTARG;;
   \? ) synexit "Error: invalid option";;
  esac
done
shift $((OPTIND - 1 ))
if [[ -n $1 ]]; then synexit "Error: extra parameters"; fi

# Add .lib dir to library path
build=${HIO_BUILD:=$PWD/..}
libs=$build/src/.libs

if   [[ ${OSTYPE:0:6} == "darwin" ]]; then export DYLD_LIBRARY_PATH=$libs:$DYLD_LIBRARY_PATH
elif [[ ${OSTYPE:0:5} == "linux" ]];  then export LD_LIBRARY_PATH=$libs:$LD_LIBRARY_PATH
else echo "run_setup: OSTYPE \"$OSTYPE\" not recognized"; exit; fi

# Load module environment recorded at build
mod_script="hiobuild.modules.bash"
if [[ -e $HIO_BUILD/$mod_script ]]; then . $HIO_BUILD/$mod_script; fi 

#----------------------------------------------------------------------------
# If HIO_TEST_ROOTS not set, set up default
#----------------------------------------------------------------------------
if [[ -n $PBS_JOBID ]]; then
  job_dir="/${PBS_JOBID%%.*}"
else
  job_dir=""
fi

addifd() {
  if [[ -d $1 ]]; then HIO_TEST_ROOTS="$HIO_TEST_ROOTS,posix:$1/hio_test$job_dir"; fi
}

if [[ -z $HIO_TEST_ROOTS ]]; then
  if [[ ${OSTYPE:0:6} == "darwin" ]]; then
    HIO_TEST_ROOTS="posix:$PWD/.test_root1"
  elif [[ ${HOSTNAME:0:3} == "ga-" ]]; then
    HIO_TEST_ROOTS="DataWarp"
  elif [[ ${HOSTNAME:0:3} == "bu-" ]]; then
    HIO_TEST_ROOTS="DataWarp"
  fi;
  addifd "/lscratch1/$LOGNAME"
  addifd "/lscratch2/$LOGNAME"
  addifd "/lscratch3/$LOGNAME"
  addifd "/lscratch4/$LOGNAME"
  addifd "/scratch1/users/$LOGNAME"
  addifd "/lustre/scratch1/yellow/$LOGNAME"
  addifd "$HOME/scratch-tmp"
  if [[ ${HIO_TEST_ROOTS:0:1} == "," ]]; then HIO_TEST_ROOTS=${HIO_TEST_ROOTS:1}; fi
fi

#----------------------------------------------------------------------------
# Clean data roots, i.e., create or empty them out 
#----------------------------------------------------------------------------
# Late DW Ph 1 - location of BB directory
HIO_TEST_DW="/tmp/dw_scr/$LOGNAME$job_dir"
export HIO_datawarp_root=$HIO_TEST_DW

# This string contains the logic to check, empty or create a test data root
# directory.  It needs to be executed on a compute node via aprun for datawarp.
# It's also used for locally accessible directories for the sake of consistency.
clean_cmd="
  if [[ -z \$0 ]]; then
    echo \"run_setup: zero length test root name0\"
    exit
  fi
  if [ -e \$0 ]; then
    if [ -d \$0 ]; then
      if [ ! -w \$0 ]; then
        echo \"run_setup: Unable to write to test root \$0\"
        exit
      else
        echo \"---> rm -fR \$0/*\"
        rm -fR \$0/*
      fi
    else
      echo \"run_setup: Test root \$0 exists and is not a directory\"
      exit
    fi
  else
    echo \"---> mkdir -p \$0\"
    mkdir -p \$0
  fi
"

clean_roots() {
  allroots=${1-HIO_TEST_ROOTS}
  IFS=","; read -ra root <<< "$allroots"; unset IFS
  for r in "${root[@]}"; do
    shopt -s nocasematch
    echo "Cleaning: \"$r\""
    if [[ "$r" == "dw" || "$r" == "datawarp" ]]; then
      echo "===> aprun bash"
      aprun -n 1 -b bash -c "$clean_cmd" $HIO_TEST_DW
    elif [[ ${r:0:6} == "posix:" ]]; then
      r=${r:6}
      # r=${r%"/"}
      # last=${r##*/}
      if [[ $r == ${r/test} ]]; then
        echo "Warning: skipping clean of non-test directory \"$r\""
      else
        bash -c "$clean_cmd" $r
      fi
    else 
      echo "Error: data root \"$r\" type not recognized."
      exit
    fi 
    shopt -u nocasematch
  done
}




# function to invoke mpi on various platforms
myrun() {
  cmd "$mympicmd -n $ranks $*"
  rc=$?
  max_rc=$((rc > max_rc ? rc : max_rc)) 
  return $rc
}

# Function to check max_rc and output a summary message
check_rc(){
  if [[ $max_rc > 0 ]]; then result="FAILURE"
  else result="SUCCESS"; fi
  echo "############################################################"
  echo "# TEST: $0   `date "+%Y-%m-%d %H:%M:%S"`   RESULT: $result"
  echo "############################################################"
}

# Display results of run_setup
msg "run_setup:            PWD: \"$PWD\""
msg "run_setup:          build: \"$build\""
msg "run_setup:           libs: \"$libs\""
msg "run_setup: HIO_TEST_ROOTS: \"$HIO_TEST_ROOTS\""
msg "run_setup:         mpicmd: \"$mympicmd\""
msg "run_setup:           size: \"$size\""
msg "run_setup:          ranks: $ranks"
msg "run_setup:    verbose_lev: $verbose_lev"
msg "run_setup:      debug_lev: $debug_lev"
if [[ -n HIO_datawarp_root ]]; then
  msg "run_setup: HIO_datawarp_root: \"$HIO_datawarp_root\""
fi

# --- end of run_setup ---
