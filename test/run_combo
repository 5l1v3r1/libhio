# -*- Mode: sh; sh-basic-offset:2 ; indent-tabs-mode:nil -*-
#
# Copyright (c) 2014-2016 Los Alamos National Security, LLC.  All rights
#                         reserved.
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# $HEADER$
#

#----------------------------------------------------------------------------
# run_combo - run tests with multiple combinations of parameters
#----------------------------------------------------------------------------
synexit() {
  echo ""
  if [[ -n $* ]]; then echo $*; echo ""; fi
  echo "run_combo - run tests with multiple parameter combinations"
  echo ""
  echo "Iterates through all combinations of specified tests and parameters"
  echo "(-t, -s, -r, -n, -p, -x are iterated, other options are not.)"
  echo "  Syntax:"
  echo "    $0"
  echo "        -t <test> [<test>...]"
  echo "        [-x <dw_alloc_pct> [<dw_alloc_pct>...] ]"
  echo "        [-s <size> [<size>...] ]"
  echo "        [-p <ppn> [<ppn>...] ]"
  echo "        [-n <num_nodes> [<num_nodes>...] ]"
  echo "        [-r <num_ranks> [<num_ranks>...] ]"
  echo "        [-m \"<msub args>\" [\"<msub_args>\"] ]"
  echo "        [-v <verbose_level>]"
  echo "        [-d <debug_level>]"
  echo "        [-b] [-c] [-a]"
  echo "        [-w <dw_alloc>]"
  echo "        [-k knl|haswell]" 
  echo "        [-u <uber command and args>]"
  echo "        [-o <output_file>]"
  echo "        [-e <seconds>]"
  echo ""
  echo "  Iterating Options (iterate in this order):"
  echo "    -m \"<msub_args>\"   Additional arguments for msub (use with -b)"
  echo "                       Imbedded \"^\" replaced with \"-\"" 
  echo "    -t <test>          Tests to invoke"
  echo "    -x <dw_alloc_pct>  Multiply any requested allocation by this percentage"
  echo "       n<dw_nodes>     Or, if it starts with \"n\" request enough to allocate"
  echo "                       on that many DataWarp nodes based on granularity"
  echo "    -s <size>          Per rank run sizes u|t|s|m|l|x|y|z  (default s)"
  echo "       <totsz>[,<blksz>][,<nseg>]  where:"
  echo "                       totsz - total size per rank in MiB"
  echo "                       blksz - size of each write/read in KiB"
  echo "                       nseg - number of segments (not used by all tests)"
  echo "    -p <ppn>           PPN parameters"
  echo "    -n <num_nodes>     Number of nodes parameters."
  echo "    -r <num_ranks>     Number of ranks parameters"
  echo "  Non-iterating Options:"
  echo "    -v <verbose_lev>   Verbosity level for xexec2, default 1"
  echo "    -d <debug_lev>     Debug level for xexec2, default 0"
  echo "    -b                 Submit batch job with these options"
  echo "    -c                 Chain jobs - make this job dependant on previous job"
  echo "    -a                 Clean dirs After running"
  echo "    -w <dw_alloc>      DataWarp allocation policy 0=never, 1=static, 2=Moab"
  echo "    -k knl|haswell     Adds :<type> to msub -l option, influences -p default"
  echo "    -u <uber command and args>  Use to invoke a debugger"
  echo "    -o <output_file>   Instead of invoking, writes test commands to file"
  echo "    -e <seconds>       Delay between test invocations"
  echo ""
  echo "Example: run_combo -t ./run02 ./run03 -r 2 4 -s x"
  echo "  Will run:"
  echo "    ./run02 -s x -r 2"
  echo "    ./run03 -s x -r 2"
  echo "    ./run02 -s x -r 4"
  echo "    ./run03 -s x -r 4"
  echo ""
  echo "  Cornell Wright  cornell@lanl.gov"

  exit 8
}

#----------------------------------------------------------------------------
# Functions for run_setup and test scripts to use
#----------------------------------------------------------------------------
cmd() {
  echo "`date \"$datefmt\"` $host run_combo ---> $*"
  eval "$*"
  return $?
}

msg() {
  echo "`date \"$datefmt\"` $host run_combo: $*"
}

is_not_flag() {
  # Check if $1 is a flag; e.g. "-b"
  [[ "$1" =~ -.* ]] && return 1 || return 0
}

#----------------------------------------------------------------------------
# Parse arguments
#----------------------------------------------------------------------------
datefmt="+%Y-%m-%d %H:%M:%S"
args=$*
host=`hostname -s`
batch=0
chain=0
proc_type=""
uber_cmd=""
output_file=""
delay=0
# Work around getopts limitations to support multiple arguments
while getopts "htsrnpxmv:d:bcaw:k:u:o:e:" optname; do
  #msg "optname: $optname OPTIND: $OPTIND OPTARG: $OPTARG"
  case $optname in
    h ) synexit;;
    t ) eval "aaa=\${$((OPTIND))}"
        while [[ -n $aaa ]] && is_not_flag "$aaa"; do
          test+=("$aaa")
          OPTIND=$((OPTIND+1))
          eval "aaa=\${$((OPTIND))}"
        done
        ;;
    s ) eval "aaa=\${$((OPTIND))}"
        while [[ -n $aaa ]] && is_not_flag "$aaa"; do
          size+=("$aaa")
          OPTIND=$((OPTIND+1))
          eval "aaa=\${$((OPTIND))}"
        done
        ;;
    r ) eval "aaa=\${$((OPTIND))}"
        while [[ -n $aaa ]] && is_not_flag "$aaa"; do
          ranks+=("$aaa")
          OPTIND=$((OPTIND+1))
          eval "aaa=\${$((OPTIND))}"
        done
        ;;
    n ) eval "aaa=\${$((OPTIND))}"
        while [[ -n $aaa ]] && is_not_flag "$aaa"; do
          nodes+=("$aaa")
          OPTIND=$((OPTIND+1))
          eval "aaa=\${$((OPTIND))}"
        done
        ;;
    p ) eval "aaa=\${$((OPTIND))}"
        while [[ -n $aaa ]] && is_not_flag "$aaa"; do
          ppn+=("$aaa")
          OPTIND=$((OPTIND+1))
          eval "aaa=\${$((OPTIND))}"
        done
        ;;
    x ) eval "aaa=\${$((OPTIND))}"
        while [[ -n $aaa ]] && is_not_flag "$aaa"; do
          pct+=("$aaa")
          OPTIND=$((OPTIND+1))
          eval "aaa=\${$((OPTIND))}"
        done
        ;;
    m ) eval "aaa=\${$((OPTIND))}"
        while [[ -n $aaa ]] && is_not_flag "$aaa"; do
          aaa=${aaa//^/-}
          marg+=("$aaa")
          OPTIND=$((OPTIND+1))
          eval "aaa=\${$((OPTIND))}"
        done
        ;;
    v ) verbose_lev=$OPTARG;;
    d ) debug_lev=$OPTARG;;
    b ) batch=1;;
    c ) chain=1;;
    a ) after=1;;
    w ) dw_alloc_mode=$OPTARG;;
    k ) proc_type=$OPTARG;;
    u ) uber_cmd=$OPTARG;;
    o ) output_file=$OPTARG
        echo "# $(date) Generated on $host by run_combo $args" > $output_file
        echo "# $(date) Generated on $host by run_combo $args" 
        ;;
    e ) delay=$OPTARG;; 
   \? ) synexit "Error: invalid option";;
  esac
done

if [[ -z $test ]];  then synexit "Error: at least one test must be specified";fi
if [[ -z $size ]];  then size+=(" ");fi
if [[ -z $ranks ]]; then ranks+=(" ");fi
if [[ -z $nodes ]]; then nodes+=(" ");fi
if [[ -z $ppn ]];   then ppn+=(" ");fi
if [[ -z $pct ]];   then pct+=(" ");fi
if [[ -z $marg ]];  then marg+=(" ");fi

#msg "test:  '${test[@]}'"
#msg "size:  '${size[@]}'"
#msg "ranks: '${ranks[@]}'"
#msg "nodes: '${nodes[@]}'"
#msg "ppn:   '${ppn[@]}'"
#msg "pct:   '${pct[@]}'"
#msg "marg:  '${marg[@]}'"

shift $((OPTIND - 1 ))
if [[ -n $1 ]]; then synexit "Error: extra parameters"; fi
if [[ ! $delay =~ ^[0-9]+$ ]]; then synexit "Error: invalid -e integer \"$delay\""; fi

#----------------------------------------------------------------------------
# Iterate through al combinations of specified parameters
#----------------------------------------------------------------------------
declare -a fails
first=1
count=0
for r in "${ranks[@]}"; do
  for n in "${nodes[@]}"; do
    for p in "${ppn[@]}"; do
      for s in "${size[@]}"; do
        for a in "${pct[@]}"; do
          for t in "${test[@]}"; do
            for m in "${marg[@]}"; do
              #echo "t: \"$t\" s: \"$s\" r: \"$r\" n:\"$n\" p: \"$p\" m: \"$m\" v: \"$verbose_lev\" d: \"$debug_lev\" b: \"$batch\" c: \"$chain\""
              c=$t
              if [[ $s != " " ]]; then c="$c -s $s"; fi
              if [[ $r != " " ]]; then c="$c -r $r"; fi
              if [[ $n != " " ]]; then c="$c -n $n"; fi
              if [[ $p != " " ]]; then c="$c -p $p"; fi
              if [[ $a != " " ]]; then c="$c -x $a"; fi
              if [[ $m != " " ]]; then c="$c -m \"$m\""; fi
              if [[ -n $verbose_lev ]]; then c="$c -v $verbose_lev"; fi
              if [[ -n $debug_lev ]];   then c="$c -d $debug_lev"; fi
              if [[ $batch -eq 1 ]];    then c="$c -b"; fi
              if [[ $chain -eq 1 ]];    then c="$c -c"; fi
              if [[ $after -eq 1 ]];    then c="$c -a"; fi
              if [[ -n $dw_alloc_mode ]];   then c="$c -w $dw_alloc_mode"; fi
              if [[ -n $proc_type ]];   then c="$c -k $proc_type"; fi
              if [[ -n $uber_cmd ]];    then c="$c -u \"$uber_cmd\""; fi

              if [[ first -eq 0 && delay -ne 0 ]]
                then cmd "sleep $delay"
              else
                first=0
              fi              
 
              if [[ -z $output_file ]]; then  
                cmd $c
                rc=$?
                if [[ rc -ne 0 ]]; then fails=("${fails[@]}" "rc:$rc cmd:$c"); fi
              else
                echo $c >> $output_file
                echo $c
              fi 
              count=$((count+1)) 
            done
          done
        done
      done
    done
  done
done

msg "Tests: $count  Failures: ${#fails[@]}"
for (( i=0; i<${#fails[@]}; i++ )); do msg ${fails[$i]}; done
# --- end of run_combo ---
